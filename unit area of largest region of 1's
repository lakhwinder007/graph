 bool isvalid(int i,int j,int n, int m){
        if(i<0||j<0||i>=n||j>=m)return false;
        else return true;
    }
    void dfs(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&vis,int &count){
        vis[i][j]=1;
        count++;
        int n=grid.size();
        int m=grid[0].size();
        if(isvalid(i,j,n,m)==false)return ;
        if(isvalid(i-1,j,n,m)&&grid[i-1][j]==1&&vis[i-1][j]==0)dfs(i-1,j,grid,vis,count);
        if(isvalid(i-1,j+1,n,m)&&grid[i-1][j+1]==1&&vis[i-1][j+1]==0)dfs(i-1,j+1,grid,vis,count);
        if(isvalid(i,j+1,n,m)&&grid[i][j+1]==1&&vis[i][j+1]==0)dfs(i,j+1,grid,vis,count);
        if(isvalid(i+1,j+1,n,m)&&grid[i+1][j+1]==1&&vis[i+1][j+1]==0)dfs(i+1,j+1,grid,vis,count);
         if(isvalid(i+1,j,n,m)&&grid[i+1][j]==1&&vis[i+1][j]==0)dfs(i+1,j,grid,vis,count);
         if(isvalid(i+1,j-1,n,m)&&grid[i+1][j-1]==1&&vis[i+1][j-1]==0)dfs(i+1,j-1,grid,vis,count);
          if(isvalid(i,j-1,n,m)&&grid[i][j-1]==1&&vis[i][j-1]==0)dfs(i,j-1,grid,vis,count);
          if(isvalid(i-1,j-1,n,m)&&grid[i-1][j-1]==1&&vis[i-1][j-1]==0)dfs(i-1,j-1,grid,vis,count);
    }
    int findMaxArea(vector<vector<int>>& grid) {
            
             int n=grid.size();
             int m=grid[0].size();
             vector<vector<int>>vis;
             vector<int>v(m,0);
             for(int i=0;i<n;i++){
                 vis.push_back(v);
             }
             int ans=0;
             for(int i=0;i<n;i++){
                 for(int j=0;j<m;j++){
                     if(grid[i][j]==1&&vis[i][j]==0){
                          vis[i][j]=1;
                           int count=0;
                         dfs(i,j,grid,vis,count);
                          ans=max(ans,count);
                     }
                 }
             }
             
             return ans;;
             
    }
