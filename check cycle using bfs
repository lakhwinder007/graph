  public:
    // Function to detect cycle in an undirected graph.
    //using bfs
    bool bfs(int v,vector<int>adj[],int i,vector<int>&vis){
        queue<pair<int,int>>q;
        q.push({i,-1});
        vis[i]=1;
       
        while(q.size()>0){
            int node=q.front().first;
        int par=q.front().second;
        q.pop(); 
        for(auto x:adj[node]){
            if(vis[x]==0){
                vis[x]=1;
                q.push({x,node});
                
            }
            else if(vis[x]==1&&par!=x)return true;
        }
        }
        return false;
    }
    bool isCycle(int v, vector<int> adj[]) {
        // Code here
        vector<int>vis(v,0);
        for(int i=0;i<v;i++){
            if(vis[i]==0){
                if(bfs(v,adj,i,vis))return true;
            }
        }
        return false;
    }
};
