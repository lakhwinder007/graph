bool isvalid(int i,int j,int n){
    if(i<0||j<0||i>=n||j>=n)return false;
    return true;
}
	int minStepToReachTarget(vector<int>&k, vector<int>&t, int n){
	    // Code here
	    vector<vector<int>>vis(n,vector<int>(n,0));
	    if(k[0]==t[0]&&k[1]==t[1])return 0;
	    vis[k[0]-1][k[1]-1]=1;
	    queue<pair<int,pair<int,int>>>q;
	    q.push({1,{k[0]-1,k[1]-1}});
	   
	    while(q.size()){
	    int x=q.front().second.first;
	    int y=q.front().second.second;
	     int count=q.front().first;
	    q.pop();
	    
	    vis[x][y]=1;
	    //count++;
	    if(isvalid(x+2,y+1,n)&&vis[x+2][y+1]==0){
	        q.push({count+1,{x+2,y+1}});
	        vis[x+2][y+1]=1;
	        if((x+2==t[0]-1)&&(y+1==t[1]-1))return count;
	    }
	    if(isvalid(x+2,y-1,n)&&vis[x+2][y-1]==0){
	        q.push({count+1,{x+2,y-1}});
	         vis[x+2][y-1]=1;
	         if((x+2==t[0]-1)&&(y-1==t[1]-1))return count;
	    }
	    if(isvalid(x-2,y+1,n)&&vis[x-2][y+1]==0){
	        q.push({count+1,{x-2,y+1}});
	         vis[x-2][y+1]=1;
	         if((x-2==t[0]-1)&&(y+1==t[1]-1))return count;
	    }
	    if(isvalid(x-2,y-1,n)&&vis[x-2][y-1]==0){
	        q.push({count+1,{x-2,y-1}});
	         vis[x-2][y-1]=1;
	         if((x-2==t[0]-1)&&(y-1==t[1]-1))return count;
	    }
	    
	    if(isvalid(x+1,y+2,n)&&vis[x+1][y+2]==0){
	        q.push({count+1,{x+1,y+2}});
	         vis[x+1][y+2]=1;
	         if((x+1==t[0]-1)&&(y+2==t[1]-1))return count;
	    }
	    if(isvalid(x+1,y-2,n)&&vis[x+1][y-2]==0){
	        q.push({count+1,{x+1,y-2}});
	        vis[x+1][y-2]=1;
	         if((x+1==t[0]-1)&&(y-2==t[1]-1))return count;
	    }
	    if(isvalid(x-1,y+2,n)&&vis[x-1][y+2]==0){
	        q.push({count+1,{x-1,y+2}});
	        vis[x-1][y+2]=1;
	         if((x-1==t[0]-1)&&(y+2==t[1]-1))return count;
	    }
	    if(isvalid(x-1,y-2,n)&&vis[x-1][y-2]==0){
	        q.push({count+1,{x-1,y-2}});
	        vis[x-1][y-2]=1;
	         if((x-1==t[0]-1)&&(y-2==t[1]-1))return count;
	    }
	    }
	    return -1;
	}
