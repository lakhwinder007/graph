 bool isvalid(int i,int j,int n,int m){
        if(i<n&&i>=0&&j<m&&j>=0)return true;
        return false;
    }
    void bfs(int i,int j,vector<vector<char>>&grid,vector<vector<int>>&vis,vector<int>&row,vector<int>&col){
        queue<pair<int,int>>q;
        q.push({i,j});
        vis[i][j]=1;
        int n=grid.size();
        int m=grid[0].size();
        while(q.size()){
            int ir=q.front().first;
            int jc=q.front().second;
            q.pop();
             for(int k=0;k<8;k++){
                   if(isvalid(ir+row[k],jc+col[k],n,m)&&vis[ir+row[k]][jc+col[k]]==0&&(int)grid[ir+row[k]][jc+col[k]]-(int)'0'==1) {
                       q.push({ir+row[k],jc+col[k]});
                       vis[ir+row[k]][jc+col[k]]=1;
                       
                   }
              }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;
        vector<int>row(8,0),col(8,0);
        row[0]=-1,col[0]=0;
        row[1]=-1,col[1]=1;
        row[2]=0,col[2]=1;
        row[3]=1,col[3]=1;
        row[4]=1,col[4]=0;
        row[5]=1,col[5]=-1;
        row[6]=0,col[6]=-1;
        row[7]=-1,col[7]=-1;
        vector<int>v(m,0);
        vector<vector<int>>vis;
        for(int i=0;i<n;i++){
            vis.push_back(v);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((int)grid[i][j]-(int)'0'==1&&vis[i][j]==0){
                    ans++;
                    bfs(i,j,grid,vis,row,col);
                }
            }
        }
        return ans;
    }
